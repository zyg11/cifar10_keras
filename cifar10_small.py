from __future__ import print_function
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator#图片预处理
#用以生成一个batch的图像数据，支持实时数据提升。训练时该函数会无限生成数据，直到达到规定的epoch次数为止
#生成器初始化datagen ，然后datagen.fit,计算依赖于数据的变换所需要的统计信息
from keras.models import Sequential#序贯式模型
from keras.layers import Dense,Dropout,Activation,Flatten
#即把多维的输入一维化，常用在从卷积层到全连接层的过渡。Flatten不影响batch的大小。
from keras.layers import MaxPooling2D,Conv2D

batch_size = 32
num_classes = 10
epochs = 200
data_augmenttation=False
#数据载入
(x_train,y_train),(x_test,y_test)=cifar10.load_data()
#多分类标签生成
y_train=keras.utils.to_categorical(y_train,num_classes)
y_test=keras.utils.to_categorical(y_test,num_classes)
#网络结构配置
model=Sequential()
model.add(Conv2D(32,(3,3),padding='same',
                 input_shape=x_train.shape[1:]))#读取大小，从第二维开始读取
# (samples, rows, cols, channels)` if data_format='channels_last'.
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))#最大池化层
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3),padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

#训练参数设置
#initialize rmsprop optimizer
opt=keras.optimizers.rmsprop(lr=0.0001,decay=1e-6)

#Let's train the model using Rmsprop
model.compile(optimizer=opt,
              loss='categorical_crossentropy',
              metrics=['accuracy'])
#生成训练数据
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train/=255
x_test/=255

if not data_augmenttation:
    print('Not using data augmentation')
    model.fit(x_train,y_train,
              batch_size=batch_size,
              epochs=epochs,
              validation_data=(x_test,y_test),
              shuffle=True)
else:
    print('Using real_time data augmentation.')
    #This will do preprocessing and realtime data augmentation
    datagen=ImageDataGenerator(
        featurewise_center=False,# set input mean to 0 over the dataset
        samplewise_center=False,# set each sample mean to 0
        featurewise_std_normalization=False,#divide inputs by std of the dataset
        samplewise_std_normalization=False,#divide each input by its std
        zca_whitening=False,#apply ZCA whitenting
        rotation_range=0,#randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,# randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1, # randomly shift images vertically (fraction of total height)
        horizontal_flip=True, # randomly flip images
        vertical_flip=True)## randomly flip images

        #Compute quantities required for feature-wise normalization
        # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)
#fit训练
    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(x_train,y_train,
                                     batch_size=batch_size),
                        steps_per_epoch=x_train.shape[0], # batch_size,
                        epochs=epochs,
                        validation_data=(x_test,y_test))








